// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// i2s_slave_rx //
// ------------ //

#define i2s_slave_rx_wrap_target 1
#define i2s_slave_rx_wrap 3

static const uint16_t i2s_slave_rx_program_instructions[] = {
    0x2018, //  0: wait   0 gpio, 24                 
            //     .wrap_target
    0x2099, //  1: wait   1 gpio, 25                 
    0x2019, //  2: wait   0 gpio, 25                 
    0x4001, //  3: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program i2s_slave_rx_program = {
    .instructions = i2s_slave_rx_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config i2s_slave_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + i2s_slave_rx_wrap_target, offset + i2s_slave_rx_wrap);
    return c;
}

static inline void i2s_slave_rx_init(PIO pio, uint sm, uint offset, uint clkpin, uint lrpin, uint datpin) {
    pio_sm_config c = i2s_slave_rx_program_get_default_config(offset);
    // Map the state machine's IN pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_in_pins(&c, datpin);
    // Setup input shifting
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_in_shift(&c, false, true, 32);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, clkpin);
    pio_gpio_init(pio, lrpin);
    pio_gpio_init(pio, datpin);
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, clkpin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, lrpin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, datpin, 1, false);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

